apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

repositories {
    if (project.hasProperty('additional_repositories')){
        additional_repositories.split(';').each{ repo ->
            maven { url repo }
        }
    }
    mavenCentral()
}

configurations {
    compile {
        description = 'Includes all dependencies required for compile and runtime'
        transitive = false
    }
    
    testCompile {
        description = 'Includes all dependencies required for testing'
        transitive = false
    }
}

// import dependencies
apply from: 'dependencies.gradle'

sourceSets{
    main {
        java.srcDir 'src'
        java.srcDir 'src-gwt'
        resources.srcDir 'src'
        resources.srcDir 'src-gwt'
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': product_name,
        'Implementation-Version': version
    }
    baseName "${artifact_name}-client"
    from (sourceSets.main.allSource){ include '**/*.java' }
    exclude '**/.gitignore'
}

task serverJar (type: Jar, dependsOn: compileJava){
    manifest {
        attributes 'Implementation-Title': product_name,
        'Implementation-Version': version
    }
    baseName "${artifact_name}-server"
    from sourceSets.main.output
    includeEmptyDirs false
    exclude '**/.gitignore'
    exclude '**/client/*'
    exclude '**/*.gwt.xml'
}

javadoc {
    project.configure(options) {
        memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        charSet = "UTF-8"
        docTitle = "$product_name"
        windowTitle = "$product_name"
        header = "<b>$product_name</b>"
        author = "true"
        use = "true"
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from "${buildDir}/docs/javadoc"
    baseName "${artifact_name}-client"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
    baseName "${artifact_name}-client"
}

task serverSourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
    baseName "${artifact_name}-server"
    exclude '**/.gitignore'
    exclude '**/client/*'
    exclude '**/*.gwt.xml'
}

task serverJavadoc(type: Javadoc){
    source sourceSets.main.allJava
    destinationDir = file("${buildDir}/docs/javadocServer")
    exclude '**/.gitignore'
    exclude '**/client/*'
    exclude '**/*.gwt.xml'
}

task serverJavadocJar(type: Jar, dependsOn: serverJavadoc) {
    classifier = 'javadoc'
    from "${buildDir}/docs/javadocServer"
    baseName "${artifact_name}-server"
}

artifacts {
    archives jar
    tasks.each{ task ->
        if (task.name.endsWith("Jar")){
            archives task
        }
    }
}

signing { 
    required {gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives 
}

if (project.hasProperty('publish_repository')){
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: publish_repository) {
                    authentication(userName: publish_user, password: publish_password)
                }
                artifacts.each{ arch ->
                    def filterName=arch.name
                    filterName=filterName.substring(0, filterName.lastIndexOf("-"))
                    addFilter(filterName){artifact, file ->
                        artifact.name.startsWith(filterName)
                    }
                    pom(filterName).project {
                        name product_name
                        packaging 'jar'
                        description product_description
                        groupId group_id
                        url "http://www.opencms.org"
                        scm {
                            url "scm:git@github.com:alkacon/${artifact_name}.git"
                            connection "scm:git@github.com:alkacon/${artifact_name}.git"
                            developerConnection "scm:git@github.com:alkacon/${artifact_name}.git"
                        }
                        licenses {
                            license {
                                name 'GNU Lesser General Public License'
                                url 'http://www.gnu.org/licenses/lgpl.html'
                                distribution 'repo'
                            }
                        }
                        organization {
                            name 'Alkacon Software'
                            url 'http://www.alkacon.com'
                        }
                        developers {
                            developer {
                                name 'Alkacon Software'
                                url 'http://www.alkacon.com'
                            }
                        }
                    }
                }
            }
        }
    }
}

install {
    repositories {
        mavenInstaller {
            artifacts.each{ arch ->
                def filterName=arch.name
                filterName=filterName.substring(0, filterName.lastIndexOf("-"))
                addFilter(filterName){artifact, file ->
                    artifact.name.startsWith(filterName)
                }
                pom(filterName).project {
                    name product_name
                    packaging 'jar'
                    description product_description
                    groupId group_id
                    url "http://www.opencms.org"
                    scm {
                        url "scm:git@github.com:alkacon/${artifact_name}.git"
                        connection "scm:git@github.com:alkacon/${artifact_name}.git"
                        developerConnection "scm:git@github.com:alkacon/${artifact_name}.git"
                    }
                    licenses {
                        license {
                            name 'GNU Lesser General Public License'
                            url 'http://www.gnu.org/licenses/lgpl.html'
                            distribution 'repo'
                        }
                    }
                    organization {
                        name 'Alkacon Software'
                        url 'http://www.alkacon.com'
                    }
                    developers {
                        developer {
                            name 'Alkacon Software'
                            url 'http://www.alkacon.com'
                        }
                    }
                }
            }
        }
    }
}

// fixed issue with libraries containing both .java and .class files
tasks.withType(JavaCompile) {
    options.compilerArgs += ["-sourcepath", ""]
}

